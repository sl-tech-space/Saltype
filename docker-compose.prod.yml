services:
  nginx:
    image: nginx:alpine
    container_name: saltype-nginx
    volumes:
      # - ${SSL_VOLUME}
      - ./templates:/etc/nginx/templates
    ports:
      - "${HTTP_PORT}:${HTTP_PORT}"
    environment:
      - BACKEND=${BACKEND_PROXY}
      - FRONTEND=${FRONTEND_PROXY}
      - SERVER_NAME=${SERVER_NAME}
      - HTTP_PORT=${HTTP_PORT}
      # - HTTPS_PORT=${HTTPS_PORT}
      # - SSL_CERTIFICATE_PATH=${SSL_CERTIFICATE_PATH}
      # - SSL_CERTIFICATE_KEY_PATH=${SSL_CERTIFICATE_KEY_PATH}
    depends_on:
      - frontend
      - backend
    networks:
      - frontend-net
      - backend-net
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: "0.5"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${HTTP_PORT}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    security_opt:
      - no-new-privileges:true
    logging:
      options:
        max-size: "10m"
        max-file: "3"

  frontend:
    build:
      context: ./frontend
      dockerfile: dockerfile.prod
    container_name: saltype-nuxt
    volumes:
      - ./frontend/server/data:/app/.output/server/data
    environment:
      - HOST=0.0.0.0
    depends_on:
      - backend
    networks:
      - frontend-net
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "1.0"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    logging:
      options:
        max-size: "10m"
        max-file: "3"

  backend:
    build:
      context: ./backend
      dockerfile: dockerfile.prod
    container_name: saltype-django
    volumes:
      - ./backend:/app
    environment:
      - DEBUG=${DEBUG:-false}
      - SECRET_KEY=${SECRET_KEY}
      - DJANGO_ALLOWED_HOSTS=${DJANGO_ALLOWED_HOSTS}
      - SQL_ENGINE=${DB_ENGINE}
      - SQL_DATABASE=${DB_NAME}
      - SQL_USER=${DB_USER}
      - SQL_PASSWORD=${DB_PASSWORD}
      - SQL_HOST=${DB_HOST}
      - SQL_PORT=${DB_PORT}
      - PYTHONIOENCODING=utf-8
    depends_on:
      - db
    networks:
      - backend-net
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "1.0"
    healthcheck:
      test: ["CMD", "python", "manage.py", "check", "--database", "default"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    logging:
      options:
        max-size: "10m"
        max-file: "3"

  db:
    image: postgres:14-alpine
    container_name: saltype-postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - /var/run/postgresql
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    networks:
      - backend-net
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "1.0"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    security_opt:
      - no-new-privileges:true
    logging:
      options:
        max-size: "10m"
        max-file: "3"

  cron:
    build:
      context: ./backend
      dockerfile: dockerfile.cron.prod
    container_name: saltype-cron
    command: cron -f
    volumes:
      - ./backend:/app
      - ./backend/logs:/var/log
    environment:
      - DEBUG=${DEBUG:-false}
      - SECRET_KEY=${SECRET_KEY}
      - DJANGO_ALLOWED_HOSTS=${DJANGO_ALLOWED_HOSTS}
      - SQL_ENGINE=${DB_ENGINE}
      - SQL_DATABASE=${DB_NAME}
      - SQL_USER=${DB_USER}
      - SQL_PASSWORD=${DB_PASSWORD}
      - SQL_HOST=${DB_HOST}
      - SQL_PORT=${DB_PORT}
    depends_on:
      - backend
    networks:
      - backend-net
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: "0.5"
    healthcheck:
      test: ["CMD", "pgrep", "cron"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    logging:
      options:
        max-size: "10m"
        max-file: "3"

networks:
  frontend-net:
    driver: bridge
  backend-net:
    driver: bridge

volumes:
  postgres_data:
  frontend_data:
